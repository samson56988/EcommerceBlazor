@inject IProductService ProductServive
@implements IDisposable

<center><h2>Top Product of Today</h2></center>
@if(ProductServive.Products == null || ProductServive.Products.Count == 0)
{
    <span>@ProductServive.Message</span>
}
else
{
    <div class="container">
        @foreach(var product in ProductServive.Products)
        {
            @if(product.Featured)
            {
                <div class="featured-product">
                 <div>
                     <a href="product/@product.Id">
                         <img src="@product.ImageUrl">
                     </a>
                 </div>
                 <h4><a href="product/@product.Id">@product.Title</a></h4>
                 @if(product.variants != null && product.variants.Count > 0)
                    {
                        <h5 class="price">
                             $@product.variants[0].Price
                        </h5>
                    }
                </div>
            }
        }
    </div>
}

@code {
    protected override void OnInitialized()
    {
        ProductServive.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductServive.ProductsChanged -= StateHasChanged;
    }

}
