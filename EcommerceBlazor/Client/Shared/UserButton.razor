@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject ICartService cartService

<div class="dropdown">
    <button @onclick="ToggleUserMenu"
        @onfocusout="HideUserMenu"
        class="btn btn-secondary dropdown-toggle user-button">
        <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>
                 <a href="/profile" class="dropdown-item">Profile</a>
                   <a href="/order" class="dropdown-item">Order</a>
            <button class="dropdown-item" @onclick="Logout">Logout</button>
            </Authorized>
            <NotAuthorized>
          <a href="/register" class="dropdown-item">Register</a>
          <a href="/login?returnUrl=@navManager.ToBaseRelativePath(navManager.Uri)" class="dropdown-item">Login</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private bool showUserMenu = false;

    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }

    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("authToken");
        await cartService.GetItemsCount();
        await authenticationStateProvider.GetAuthenticationStateAsync();
        navManager.NavigateTo("");
    }
}
