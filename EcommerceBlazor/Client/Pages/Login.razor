@page "/login"
@inject IAuthService authService
@inject ILocalStorageService LocalStorage
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject ICartService cartService
@using Microsoft.AspNetCore.WebUtilities

<PageTitle>Login</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"/>
        <ValidationMessage For="@(() => user.Email)"/>
    </div>
    <div class="mb-3">
        <label for="email">Password</label>
        <InputText id="password" @bind-Value="user.Password" type="password" class="form-control"/>
           <ValidationMessage For="@(() => user.Password)"/>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
    @*<div class="@messageCssClass">
        <span>@Message</span>
    </div>*@
   

</EditForm>

<div class="text-danger">
    <span>@errormessage</span>
</div>

@code {
    private UserLoginModel user = new UserLoginModel();

    private string errormessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl",out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {

        var result = await authService.Login(user);
        if(result.Success)
        {
            errormessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await authenticationStateProvider.GetAuthenticationStateAsync();
            await cartService.StoreCartItems(true);
            await cartService.GetItemsCount();
            navigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errormessage = result.Message;
        }

    }

}
